vim9script

## General
set number  # Show line numbers
set linebreak   # Break lines at word (requires Wrap lines)
set showbreak=+++   # Wrap-broken line prefix
set textwidth=72    # Line wrap (number of cols)
set showmatch   # Highlight matching brace
set spell   # Enable spell-checking
set visualbell  # Use visual bell (no beeping)

set hlsearch    # Highlight all search results
set smartcase   # Enable smart-case search
set ignorecase  # Always case-insensitive
set incsearch   # Searches for strings incrementally

set autoindent  # Auto-indent new lines
set cindent # Use 'C' style program indenting
set expandtab   # Use spaces instead of tabs
set shiftwidth=2    # Number of auto-indent spaces
set smartindent # Enable smart-indent
set smarttab    # Enable smart-tabs
set softtabstop=2   # Number of spaces per Tab

## Advanced
set ruler   # Show row and column ruler information

set undolevels=1000 # Number of undo levels
set backspace=indent,eol,start  # Backspace behaviour


filetype plugin indent on  # Load plugins according to detected filetype.
syntax on                  # Enable syntax highlighting.

set shiftround             # >> indents to next multiple of 'shiftwidth'.

set backspace=indent,eol,start  # Make backspace work as you would expect.
set hidden                 # Switch between buffers without having to save first.
set laststatus=2         # Always show statusline.
set display=lastline  # Show as much as possible of the last line.

set showmode               # Show current mode in command-line.
set showcmd                # Show already typed keys when more are expected.

set incsearch              # Highlight while searching with / or ?.
set hlsearch               # Keep matches highlighted.

set ttyfast                # Faster redrawing.
set lazyredraw             # Only redraw when necessary.

set splitbelow             # Open new windows below the current window.
set splitright             # Open new windows right of the current window.

set cursorline             # Find the current line quickly.
set wrapscan               # Searches wrap around end-of-file.
set report=0         # Always report changed lines.
set synmaxcol=200       # Only highlight the first 200 columns.

set list                   # Show non-printable characters.


# Put all temporary files under the same directory.
# https://github.com/mhinz/vim-galore#temporary-files
set backup
set backupdir=$HOME/.vim/files/backup/
set backupext=-vimbackup
set backupskip=
set directory=$HOME/.vim/files/swap//
set updatecount=100
set undofile
set undodir=$HOME/.vim/files/undo/
set viminfo='100,n$HOME/.vim/files/info/viminfo'

set clipboard=unnamed
set colorcolumn=72
set formatoptions+=croqlt


# for cursor
    &t_SI = "\<Esc>[6 q"
    &t_SR = "\<Esc>[4 q"
    &t_EI = "\<Esc>[2 q"


if &term =~ "xterm\\|rxvt"
    # use an orange cursor in insert mode
    &t_SI = "\<Esc>]12;orange\x7"
    # use a red cursor otherwise
    &t_EI = "\<Esc>]12;red\x7"
    silent !echo -ne "\033]12;red\007"
    # reset cursor when vim exits
    autocmd VimLeave * silent !echo -ne "\033]112\007"
    # use \003]12;gray\007 for gnome-terminal and rxvt up to version 9.21
endif


if has('multi_byte') && &encoding ==# 'utf-8'
  &listchars = 'tab:▸ ,extends:❯,precedes:❮,nbsp:±,trail:⣿'
  &fillchars = 'vert: ,diff: '  # ▚
  &showbreak = '↪ '
  highlight VertSplit ctermfg=242
  # augroup vimrc
  #   autocmd InsertEnter * set listchars-=trail:⣿
  #   autocmd InsertLeave * set listchars+=trail:⣿
  # augroup END
else
  &listchars = 'tab:> ,extends:>,precedes:<,nbsp:.'
  &fillchars = 'vert: ,stlnc:#'
  &showbreak = '-> '
  augroup vimrc
    autocmd InsertEnter * set listchars-=trail:.
    autocmd InsertLeave * set listchars+=trail:.
  augroup END
endif


# Use tab for trigger completion with characters ahead and navigate.
# NOTE: There's always complete item selected by default, you may want to enable
# no select by `"suggest.noselect": true` in your configuration file.
# NOTE: Use command ':verbose imap <tab>' to make sure tab is not mapped by
# other plugin before putting this into your config.
inoremap <silent><expr> <TAB>
      \ coc#pum#visible() ? coc#pum#next(1) :
      \ CheckBackspace() ? "\<Tab>" :
      \ coc#refresh()
inoremap <expr><S-TAB> coc#pum#visible() ? coc#pum#prev(1) : "\<C-h>"

# Make <CR> to accept selected completion item or notify coc.nvim to format
# <C-g>u breaks current undo, please make your own choice.
inoremap <silent><expr> <CR> coc#pum#visible() ? coc#pum#confirm()
                              \: "\<C-g>u\<CR>\<c-r>=coc#on_enter()\<CR>"

function CheckBackspace() abort
  let col = col('.') - 1
  return !col || getline('.')[col - 1]  =~# '\s'
endfunction

# Use <c-space> to trigger completion.
if has('nvim')
  inoremap <silent><expr> <c-space> coc#refresh()
else
  inoremap <silent><expr> <c-@> coc#refresh()
endif

# Use `[g` and `]g` to navigate diagnostics
# Use `:CocDiagnostics` to get all diagnostics of current buffer in location list.
nmap <silent> [g <Plug>(coc-diagnostic-prev)
nmap <silent> ]g <Plug>(coc-diagnostic-next)

# GoTo code navigation.
nmap <silent> gd <Plug>(coc-definition)
nmap <silent> gy <Plug>(coc-type-definition)
nmap <silent> gi <Plug>(coc-implementation)
nmap <silent> gr <Plug>(coc-references)

# Use K to show documentation in preview window.
nnoremap <silent> K :call ShowDocumentation()<CR>

function ShowDocumentation()
  if CocAction('hasProvider', 'hover')
    call CocActionAsync('doHover')
  else
    call feedkeys('K', 'in')
  endif
endfunction

# Highlight the symbol and its references when holding the cursor.
autocmd CursorHold * silent call CocActionAsync('highlight')

# Symbol renaming.
nmap <leader>rn <Plug>(coc-rename)

# Formatting selected code.
xmap <leader>f  <Plug>(coc-format-selected)
nmap <leader>f  <Plug>(coc-format-selected)

augroup mygroup
  autocmd!
  # Setup formatexpr specified filetype(s).
  autocmd FileType typescript,json setl formatexpr=CocAction('formatSelected')
  # Update signature help on jump placeholder.
  autocmd User CocJumpPlaceholder call CocActionAsync('showSignatureHelp')
augroup end

# Applying codeAction to the selected region.
# Example: `<leader>aap` for current paragraph
xmap <leader>a  <Plug>(coc-codeaction-selected)
nmap <leader>a  <Plug>(coc-codeaction-selected)

# Remap keys for applying codeAction to the current buffer.
nmap <leader>ac  <Plug>(coc-codeaction)
# Apply AutoFix to problem on the current line.
nmap <leader>qf  <Plug>(coc-fix-current)

# Run the Code Lens action on the current line.
nmap <leader>cl  <Plug>(coc-codelens-action)

# Map function and class text objects
# NOTE: Requires 'textDocument.documentSymbol' support from the language server.
xmap if <Plug>(coc-funcobj-i)
omap if <Plug>(coc-funcobj-i)
xmap af <Plug>(coc-funcobj-a)
omap af <Plug>(coc-funcobj-a)
xmap ic <Plug>(coc-classobj-i)
omap ic <Plug>(coc-classobj-i)
xmap ac <Plug>(coc-classobj-a)
omap ac <Plug>(coc-classobj-a)

# Remap <C-f> and <C-b> for scroll float windows/popups.
if has('nvim-0.4.0') || has('patch-8.2.0750')
  nnoremap <silent><nowait><expr> <C-f> coc#float#has_scroll() ? coc#float#scroll(1) : "\<C-f>"
  nnoremap <silent><nowait><expr> <C-b> coc#float#has_scroll() ? coc#float#scroll(0) : "\<C-b>"
  inoremap <silent><nowait><expr> <C-f> coc#float#has_scroll() ? "\<c-r>=coc#float#scroll(1)\<cr>" : "\<Right>"
  inoremap <silent><nowait><expr> <C-b> coc#float#has_scroll() ? "\<c-r>=coc#float#scroll(0)\<cr>" : "\<Left>"
  vnoremap <silent><nowait><expr> <C-f> coc#float#has_scroll() ? coc#float#scroll(1) : "\<C-f>"
  vnoremap <silent><nowait><expr> <C-b> coc#float#has_scroll() ? coc#float#scroll(0) : "\<C-b>"
endif

# Use CTRL-S for selections ranges.
# Requires 'textDocument/selectionRange' support of language server.
nmap <silent> <C-s> <Plug>(coc-range-select)
xmap <silent> <C-s> <Plug>(coc-range-select)

# Add `:Format` command to format current buffer.
command! -nargs=0 Format :call CocActionAsync('format')

# Add `:Fold` command to fold current buffer.
command! -nargs=? Fold :call     CocAction('fold', <f-args>)

# Add `:OR` command for organize imports of the current buffer.
command! -nargs=0 OR   :call     CocActionAsync('runCommand', 'editor.action.organizeImport')

# Add (Neo)Vim's native statusline support.
# NOTE: Please see `:h coc-status` for integrations with external plugins that
# provide custom statusline: lightline.vim, vim-airline.
set statusline^=%{coc#status()}%{get(b:,'coc_current_function','')}

# Mappings for CoCList
# Show all diagnostics.
nnoremap <silent><nowait> <space>a  :<C-u>CocList diagnostics<cr>
# Manage extensions.
nnoremap <silent><nowait> <space>e  :<C-u>CocList extensions<cr>
# Show commands.
nnoremap <silent><nowait> <space>c  :<C-u>CocList commands<cr>
# Find symbol of current document.
nnoremap <silent><nowait> <space>o  :<C-u>CocList outline<cr>
# Search workspace symbols.
nnoremap <silent><nowait> <space>s  :<C-u>CocList -I symbols<cr>
# Do default action for next item.
nnoremap <silent><nowait> <space>j  :<C-u>CocNext<CR>
# Do default action for previous item.
nnoremap <silent><nowait> <space>k  :<C-u>CocPrev<CR>
# Resume latest coc list.
nnoremap <silent><nowait> <space>p  :<C-u>CocListResume<CR>
