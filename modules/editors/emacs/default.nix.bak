{ config, pkgs, callPackage, location, ... }:

{ 

  # services.emacs.package = pkgs.emacsPgtkNativeComp;
  services.emacs.package = pkgs.emacsUnstable;
  nixpkgs.overlays = [
    (import (builtins.fetchTarball {
      url = https://github.com/nix-community/emacs-overlay/archive/master.tar.gz;
      sha256 = "09wv9mfb94ac19mbb6s3b3kkq52jk4475l4lh4gdxb3kk3j2bwsd";
    }))
  ];
  # services.emacs.package = with pkgs; ((emacsPackagesFor emacsPgtkNativeComp).emacsWithPackages (epkgs: [ epkgs.vterm ]));

  # nixpkgs.overlays = [
    # (import (builtins.fetchGit {
      # url = "https://github.com/nix-community/emacs-overlay.git";
      # ref = "master";
      # rev = "bfc8f6edcb7bcf3cf24e4a7199b3f6fed96aaecf"; # change the revision
    # }))
  # ];


  services.emacs.enable = true;

  # system.userActivationScripts = {
    # doomEmacs = {
      # text = ''
        # source ${config.system.build.setEnvironment}
        # DOOM="$HOME/.emacs.d"

        # if [ ! -d "$DOOM" ]; then
          # git clone https://github.com/hlissner/doom-emacs.git $DOOM
          # yes | $DOOM/bin/doom install
          # rm -r $HOME/.doom.d
          # ln -s ${location}/modules/editors/emacs/doom.d $HOME/.doom.d
          # $DOOM/bin/doom sync
        # else
          # $DOOM/bin/doom sync
        # fi
      # '';
    # };
  # };

  # nixpkgs.overlays = [
    # (import (builtins.fetchTarball https://github.com/nix-community/emacs-overlay/archive/master.tar.gz))
  # ];


    # pkgs.ripgrep;
    # pkgs.coreutils-full;
    # pkgs.fd;

    # pkgs.sqlite;
    # pkgs.pandoc;
    # pkgs.emacs28Packages.emacsql;
    # pkgs.emacs28Packages.emacsql-sqlite;
    # pkgs.emacs28Packages.emacsql-sqlite-module;
    # pkgs.emacs28Packages.emacsql-sqlite-builtin;
    # pkgs.lispPackages.clsql-sqlite3;


      ## Doom dependencies
      # pkgs.git;
      # (ripgrep.override {withPCRE2 = true;})
      # pkgs.gnutls;              # for TLS connectivity

      ## Optional dependencies
      # fd                  # faster projectile indexing
      # pkgs.imagemagick;         # for image-dired
      # (mkIf (config.programs.gnupg.agent.enable)
        # pinentry_emacs)   # in-emacs gnupg prompts
      # pkgs.zstd;                # for undo-fu-session/undo-tree compression

      ## Module dependencies
      # :checkers spell
      # (pkgs.aspellWithDicts (ds: with ds; [
        # pkgs.en pkgs.en-computers pkgs.en-science
      # ]));
      # :tools editorconfig
      # pkgs.editorconfig-core-c; # per-project style config
      # :tools lookup & :lang org +roam
      # sqlite
      # :lang latex & :lang org (latex previews)
      # pkgs.texlive.combined.scheme-medium;
      # :lang beancount
      # beancount
      # unstable.fava  # HACK Momentarily broken on nixos-unstable


    # coreutils
    # emacsGcc
    # emacsPgtkGcc
    # emacsPgtkNativeComp 
    # emacsNativeComp
    # emacsNativeComp
      ## Emacs itself
      # binutils       # native-comp needs 'as', provided by this
      # 29 + pgtk + native-comp
      # ((emacsPackagesFor emacsPgtkGcc).emacsWithPackages (epkgs: [

      # ((emacsPackagesFor emacsPgtkNativeComp).emacsWithPackages (epkgs: [
        # epkgs.vterm]))



  environment.systemPackages = [
    (emacsWithPackagesFromUsePackage {
      # config = # rm -r $HOME/.doom.d
      package = pkgs.emacsGitNativeComp;

      # package = pkgs.emacsGitNativeComp;
      alwaysEnsure = true;
      alwaysTangle = true;
      extraEmacsPackages = epkgs: [
        epkgs.cask
      ];
    })
  ];

    fonts.fonts = [ pkgs.emacs-all-the-icons-fonts ];

}
