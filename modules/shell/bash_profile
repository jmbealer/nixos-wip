# Augment PATH
# export PATH="$HOME/.bin:$HOME/.npm-global/bin:$PATH"
export PATH="$HOME/.emacs.d/bin:$PATH"

# Where user-specific configurations should be written (analogous to /etc).
export XDG_CONFIG_HOME=${XDG_CONFIG_HOME:=$HOME/.config}
# Where user-specific non-essential (cached) data should be written (analogous to /var/cache).
export XDG_CACHE_HOME=${XDG_CACHE_HOME:=$HOME/.cache}
# Where user-specific data files should be written (analogous to /usr/share).
export XDG_DATA_HOME=${XDG_DATA_HOME:=$HOME/.local/share}
# Where user-specific state files should be written (analogous to /var/lib).
export XDG_STATE_HOME=${XDG_STATE_HOME:=$HOME/.local/state}

export MANPATH="$XDG_DATA_HOME/man:$MANPATH"

export CARGO_HOME="$XDG_DATA_HOME"/cargo
# export GOPATH="$XDG_DATA_HOME"/go
export GTK_RC_FILES="$XDG_CONFIG_HOME"/gtk-1.0/gtkrc
export GTK2_RC_FILES="$XDG_CONFIG_HOME"/gtk-2.0/gtkrc
# export LEIN_HOME="$XDG_DATA_HOME"/lein
export LYNX_CFG_PATH="$XDG_CONFIG_HOME"/lynx.cfg
export NPM_CONFIG_USERCONFIG=$XDG_CONFIG_HOME/npm/npmrc
export GDBHISTFILE="$XDG_DATA_HOME"/gdb/history
xrdb -load ~/.config/X11/xresources

source ~/.profile


# Load the default Guix profile
# GUIX_PROFILE="$HOME/.guix-profile"
# . "$GUIX_PROFILE"/etc/profile

# Load additional Guix profiles
# GUIX_EXTRA_PROFILES=$HOME/.guix-extra-profiles
# for i in $GUIX_EXTRA_PROFILES/*; do
  # profile=$i/$(basename "$i")
  # if [ -f "$profile"/etc/profile ]; then
    # GUIX_PROFILE="$profile"
    # . "$GUIX_PROFILE"/etc/profile
  # fi
  # unset profile
# done

# Load Nix environment
# if [ -f /run/current-system/profile/etc/profile.d/nix.sh ]; then
  # . /run/current-system/profile/etc/profile.d/nix.sh
# fi

# Don't use the system-wide PulseAudio configuration
# unset PULSE_CONFIG
# unset PULSE_CLIENTCONFIG

# Export the path to IcedTea so that tools pick it up correctly
# export JAVA_HOME=$(dirname $(dirname $(readlink $(which java))))

# Make sure we can reach the GPG agent for SSH auth
# export SSH_AUTH_SOCK=$(gpgconf --list-dirs agent-ssh-socket)

# Make sure `ls` collates dotfiles first (for dired)
export LC_COLLATE="C"

# Many build scripts expect CC to contain the compiler command
export CC="gcc"

export CPATH=~/.nix-profile/include
export LIBRARY_PATH=~/.nix-profile/lib
export QTDIR=~/.nix-profile

# Make Flatpak apps visible to launcher
export XDG_DATA_DIRS="$XDG_DATA_DIRS:$HOME/.local/share/flatpak/exports/share"

# Make applications in other profiles visible to launcher
# export XDG_DATA_DIRS="$XDG_DATA_DIRS:$HOME/.guix-extra-profiles/music/music/share"
# export XDG_DATA_DIRS="$XDG_DATA_DIRS:$HOME/.guix-extra-profiles/video/video/share"
# export XDG_DATA_DIRS="$XDG_DATA_DIRS:$HOME/.guix-extra-profiles/browsers/browsers/share"

# Ensure that font folders are loaded correctly
# xset +fp $(dirname $(readlink -f ~/.guix-extra-profiles/desktop/desktop/share/fonts/truetype/fonts.dir))

# emacs --daemon &
/usr/bin/env emacs --daemon

# We're in Emacs, yo
# export VISUAL="emacsclient -c -a emacs"
# export VISUAL="emacsclient -c"
# export EDITOR="emacsclient -t"
# export EDITOR="emacs -nw"
# export EDITOR=emacs -nw
export EDITOR=nvim
# export EDITOR=etn
# export PAGER="bat"
# export MANPAGER="sh -c 'col -bx | bat -l man -p'"
# export MANPAGER="col -bx < "$1" | bat --language man -p"
# man 2 select
# export PAGER='emacs -nw -e "(view-mode)"'

# Add Azure CLI to PATH if it exists
# if [ -f $HOME/Tools/azure-cli ]; then
  # export PATH=$PATH:$HOME/Tools/azure-cli/bin
  # source '$HOME/Tools/azure-cli/az.completion'
# fi

# Load .bashrc to get login environment
[ -f ~/.bashrc ] && . ~/.bashrc
